@using WikiSite.PL.ASP.Models
@model ArticleVM[]

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
	var article = Model.ToArray()[0];
	var versionNumber = Model.Length+1;
	var currentUserId = Request.IsAuthenticated ? Guid.Parse(User.Identity.Name) : Guid.Empty;
}

@section actions
{
    <li><a href="@Url.Action("Show", new { url = article.ShortUrl })">К последней общедоступной версии</a></li>
    <li><a href="@Url.Action("Index", "Comments", new { article = article.ShortUrl})">К обсуждению</a></li>
}

<h1 class="page-header">
    <a href="@Url.Action("Show", new { url = article.ShortUrl})" title="К последней общедоступной версии" class="btn btn-link page-back-button hidden-xs"><i class="fa fa-angle-left"></i></a>
	Все правки статьи <span class="text-primary">@article.Heading</span>
</h1>

<ul class="a-versions">
	@foreach (var version in Model)
	{
		versionNumber--;
		var likes = AVersionVoteVM.CountVotesFor(version.VersionId);
		var dislikes = AVersionVoteVM.CountVotesAgainst(version.VersionId);
		var likesRatio = likes + dislikes != 0 ? likes*100 / (likes + dislikes) : 0;
		var dislikesRatio = likes + dislikes != 0 ? dislikes*100 / (likes + dislikes) : 0;
		var verdictFaClass = version.IsApproved ? "fa-check-circle-o for" : "fa-times-circle-o against";
		var authHoverBtnsClass = Request.IsAuthenticated ? "hoverable" : "";
		AVersionVoteVM userVote;
		string curUserVoteForClass = "",
		       curUserVoteAgainstClass = "",
		       curUseBtnForClass = "",
		       curUseBtnAgainstClass = "",
		       btnLikeLink = "",
		       btnDislikeLink = "";
		if (Request.IsAuthenticated)
		{
			userVote = AVersionVoteVM.GetVote(currentUserId, version.VersionId);
			curUserVoteForClass = userVote != null && userVote.IsLike ? "voted" : "";
			curUserVoteAgainstClass = userVote != null && !userVote.IsLike ? "voted" : "";
			curUseBtnForClass = curUserVoteForClass != "" ? "active" : "";
			curUseBtnAgainstClass = curUserVoteAgainstClass != "" ? "active" : "";
			btnLikeLink = userVote != null && userVote.IsLike
						? Url.Action("UnVote", "AVersionsVotes", new {versionId = version.VersionId})
						: Url.Action("Vote", "AVersionsVotes", new {versionId = version.VersionId, voteIsLike = true});
			btnDislikeLink = userVote != null && !userVote.IsLike
						   ? Url.Action("UnVote", "AVersionsVotes", new {versionId = version.VersionId})
						   : Url.Action("Vote", "AVersionsVotes", new {versionId = version.VersionId, voteIsLike = false});
		}

		<li>
			<a href="@Url.Action("Show", new { url = article.ShortUrl, number = versionNumber })"></a>
			<ul class="a-version-info">
				<li>
					<label>Правка</label>
					<h2>@versionNumber</h2>
				</li>
				<li class="grow">
					<label>Автор правки</label>
					<h2>@UserVM.GetUser(version.EditionAuthorId).Nickname</h2>
				</li>
				<li class="hidden-xs">
					<label>Дата правки</label>
					<h2>@version.LastEditDate.ToString("dd.MM.yy HH:mm")</h2>
				</li>
				<li class="a-version-votes @authHoverBtnsClass">
					<label>Голоса</label>
					<h2>
						<span class="metrics">
							<span class="for @curUserVoteForClass">@likes</span>/<span class="against @curUserVoteAgainstClass">@dislikes</span>
						</span>
						@if (Request.IsAuthenticated)
						{
							<span class="buttons">
								<a href="@btnLikeLink" class="btn btn-xs btn-success @curUseBtnForClass"><i class="fa fa-thumbs-up"></i></a>/
								<a href="@btnDislikeLink" class="btn btn-xs btn-danger @curUseBtnAgainstClass"><i class="fa fa-thumbs-down"></i></a>
							</span>
						}
					</h2>
				</li>
				<li>
					<label>Вердикт</label>
					<h2 class="a-version-votes">
						<i class="fa @verdictFaClass"></i>
					</h2>
				</li>
			</ul>
			<div class="progress">
				<div class="progress-bar progress-bar-success" style="width: @likesRatio%"></div>
				<div class="progress-bar progress-bar-danger" style="width: @dislikesRatio%"></div>
			</div>
		</li>
	}
</ul>
