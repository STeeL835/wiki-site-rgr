@model WikiSite.PL.ASP.Models.UserEditModel

@{
	ViewBag.Title = $"Редактирование данных {Model.Nickname}";
	Layout = "~/Views/Shared/_Layout.cshtml";
}

@section style
{
	<link href="~/Scripts/Editor.md/css/editormd.css" rel="stylesheet" />
}

@section js
{
	<script src="~/Scripts/jquery.validate.min.js"></script>
	<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
	<script src="~/Scripts/foolproof/mvcfoolproof.unobtrusive.min.js"></script>

	<script src="~/Scripts/Editor.md/editormd.js"></script>
	<script>
		var aboutEditor;

		// Works bad with mobiles
		if (!IsMobile) {
			$(function() {
				aboutEditor = editormd({
					id: "about-editor",
					toolbarIcons: "simple",
					width: "100%",
					height: 230,
					toc: false,
					path: "/Scripts/Editor.md/lib/",
					pluginPath: "/Scripts/Editor.md/plugins/",
					emoji: true,
					imageUpload: false,
					placeholder: "Что можете о себе рассказать?"
				});
			});
		}

	</script>
	<script src="~/Scripts/Editor.md/languages/ru-ru.js"></script>
}
<div id="touch-detect" hidden></div>

<h1 class="page-header">
	<a href="@Url.Action("Index")" title="К профилю" class="btn btn-link page-back-button"><i class="fa fa-angle-left"></i></a>
	@ViewBag.Title
</h1>

@if (Request.IsAuthenticated && User.IsInRole("admin"))
{
	<div class="row">
		<div class="col-xs-12">
			<a href="@Url.Action("Edit", "Users")" class="btn btn-link btn-block">Редактировать в админке</a>
		</div>
	</div>
}

@using (Html.BeginForm())
{
	@Html.AntiForgeryToken()

	<div class="form-horizontal">
		@Html.ValidationSummary(true, "", new { @class = "text-danger" })

		<!-- Nickname -->
		<div class="form-group">
			@Html.LabelFor(model => model.Nickname, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-9">
				@Html.EditorFor(model => model.Nickname, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Nickname, "", new { @class = "text-danger" })
			</div>
		</div>

		<!-- About -->
		<div class="form-group">
			@Html.LabelFor(model => model.About, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-9">
				<div id="about-editor">
					@Html.EditorFor(model => model.About, new { htmlAttributes = new { @class = "form-control" } })
					<div class="input-notice">
						<svg class="markdown-icon" aria-hidden="true" version="1.1" width="18" height="16" viewBox="0 0 16 14" style=""><path fill-rule="evenodd" d="M14.85 3H1.15C.52 3 0 3.52 0 4.15v7.69C0 12.48.52 13 1.15 13h13.69c.64 0 1.15-.52 1.15-1.15v-7.7C16 3.52 15.48 3 14.85 3zM9 11H7V8L5.5 9.92 4 8v3H2V5h2l1.5 2L7 5h2v6zm2.99.5L9.5 8H11V5h2v3h1.5l-2.51 3.5z"></path></svg>
						<span>Поддерживается Markdown</span>
					</div>
				</div>
				@Html.ValidationMessageFor(model => model.About, "", new { @class = "text-danger" })
			</div>
		</div>

		<!-- Role select -->
		@if (User.IsInRole("admin"))
		{
			<div class="form-group">
				@Html.LabelFor(model => model.RoleId, htmlAttributes: new { @class = "control-label col-md-2" })
				<div class="col-md-9">
					@Html.DropDownListFor(model => model.RoleId, Model.Roles, htmlAttributes: new { @class = "form-control" })
				</div>
			</div>
		}

		<!-- Change password checkbox -->
		<div class="form-group">
			<div class="col-md-offset-2 col-md-9">
				@Html.LabelFor(model => model.ChangePassword, htmlAttributes: new { @class = "btn btn-inverse", data_toggle = "collapse", data_target = "#passwords" })
			</div>
			<div class="col-md-9" hidden>
				<div class="checkbox">
					@Html.EditorFor(model => model.ChangePassword)
					@Html.ValidationMessageFor(model => model.ChangePassword, "", new { @class = "text-danger" })
				</div>
			</div>
		</div>

		<div class="collapse" id="passwords">
			<!-- Old password -->
			<div class="form-group">
				@Html.LabelFor(model => model.OldPassword, htmlAttributes: new { @class = "control-label col-md-2" })
				<div class="col-md-9">
					@Html.EditorFor(model => model.OldPassword, new { htmlAttributes = new { @class = "form-control" } })
					@Html.ValidationMessageFor(model => model.OldPassword, "", new { @class = "text-danger" })
				</div>
			</div>

			<!-- New Password -->
			<div class="form-group">
				@Html.LabelFor(model => model.NewPassword, htmlAttributes: new { @class = "control-label col-md-2" })
				<div class="col-md-9">
					@Html.EditorFor(model => model.NewPassword, new { htmlAttributes = new { @class = "form-control" } })
					@Html.ValidationMessageFor(model => model.NewPassword, "", new { @class = "text-danger" })
				</div>
			</div>

			<!-- New password again -->
			<div class="form-group">
				@Html.LabelFor(model => model.ConfirmNewPassword, htmlAttributes: new { @class = "control-label col-md-2" })
				<div class="col-md-9">
					@Html.EditorFor(model => model.ConfirmNewPassword, new { htmlAttributes = new { @class = "form-control" } })
					@Html.ValidationMessageFor(model => model.ConfirmNewPassword, "", new { @class = "text-danger" })
				</div>
			</div>
		</div>

		<div class="form-group">
			<div class="col-md-offset-2 col-md-9">
				<input type="submit" value="Сохранить изменения" class="btn btn-default" />
			</div>
		</div>
	</div>
}
